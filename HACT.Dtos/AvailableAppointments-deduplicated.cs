//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.5.2.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------

namespace HACT.Dtos
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AvailableAppointments
    {
        [Newtonsoft.Json.JsonProperty("WorkOrderReference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Reference WorkOrderReference { get; set; } = new Reference();

        [Newtonsoft.Json.JsonProperty("ExclusiveHoldDuration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExclusiveHoldDuration ExclusiveHoldDuration { get; set; }

        [Newtonsoft.Json.JsonProperty("Appointment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Appointment> Appointment { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ExclusiveHoldDuration
    {
        [Newtonsoft.Json.JsonProperty("Minutes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Minutes { get; set; }

        [Newtonsoft.Json.JsonProperty("Seconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Seconds { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Appointment
    {
        [Newtonsoft.Json.JsonProperty("RepairsProviderDegreeOfPreference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RepairsProviderDegreeOfPreference { get; set; }

        [Newtonsoft.Json.JsonProperty("RepairsProviderPreferenceDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepairsProviderPreferenceDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("MeetsSLA", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MeetsSLA { get; set; }

        [Newtonsoft.Json.JsonProperty("MeetsCustomerPreference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MeetsCustomerPreference { get; set; }

        [Newtonsoft.Json.JsonProperty("CustomerDegreeOfPreference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CustomerDegreeOfPreference { get; set; }

        [Newtonsoft.Json.JsonProperty("Date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? Date { get; set; }

        [Newtonsoft.Json.JsonProperty("TimeOfDay", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TimeOfDay TimeOfDay { get; set; } = new TimeOfDay();

        [Newtonsoft.Json.JsonProperty("WorkElementReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Reference> WorkElementReference { get; set; }

        [Newtonsoft.Json.JsonProperty("Reference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Reference Reference { get; set; }


    }
}
