//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.5.2.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------

namespace HACT.Dtos
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DaysOfWeekCodeC0
    {
        [System.Runtime.Serialization.EnumMember(Value = @"10")]
        _10 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"20")]
        _20 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"30")]
        _30 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"40")]
        _40 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"50")]
        _50 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"60")]
        _60 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"70")]
        _70 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"100")]
        _100 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"200")]
        _200 = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class RequestAvailableAppointments
    {
        [Newtonsoft.Json.JsonProperty("WorkOrder", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public WorkOrder WorkOrder { get; set; } = new WorkOrder();

        [Newtonsoft.Json.JsonProperty("OnOrBeforeDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime OnOrBeforeDate { get; set; }

        [Newtonsoft.Json.JsonProperty("MaxNumberOfAppointments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxNumberOfAppointments { get; set; }

        [Newtonsoft.Json.JsonProperty("AppointmentPreference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AppointmentPreference> AppointmentPreference { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class WorkOrder
    {
        [Newtonsoft.Json.JsonProperty("DescriptionOfWork", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DescriptionOfWork { get; set; }

        [Newtonsoft.Json.JsonProperty("EstimatedLaborHours", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? EstimatedLaborHours { get; set; }

        [Newtonsoft.Json.JsonProperty("Reference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<Reference> Reference { get; set; } = new System.Collections.ObjectModel.Collection<Reference>();

        [Newtonsoft.Json.JsonProperty("Priority", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Priority Priority { get; set; } = new Priority();

        [Newtonsoft.Json.JsonProperty("WorkClass", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public WorkClass WorkClass { get; set; } = new WorkClass();

        [Newtonsoft.Json.JsonProperty("ServiceRequestReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Reference> ServiceRequestReference { get; set; }

        [Newtonsoft.Json.JsonProperty("InstructedBy", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Organization InstructedBy { get; set; } = new Organization();

        [Newtonsoft.Json.JsonProperty("AssignedToPrimary", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Party AssignedToPrimary { get; set; } = new Party();

        [Newtonsoft.Json.JsonProperty("WorkType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WorkType? WorkType { get; set; }

        [Newtonsoft.Json.JsonProperty("Site", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Site Site { get; set; } = new Site();

        [Newtonsoft.Json.JsonProperty("ParkingArrangements", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParkingArrangements { get; set; }

        [Newtonsoft.Json.JsonProperty("WorkElement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkElement> WorkElement { get; set; }

        [Newtonsoft.Json.JsonProperty("LocationOfRepair", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocationOfRepair { get; set; }

        [Newtonsoft.Json.JsonProperty("AccessInformation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccessInformation AccessInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("PersonAlert", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PersonAlert> PersonAlert { get; set; }

        [Newtonsoft.Json.JsonProperty("LocationAlert", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LocationAlert> LocationAlert { get; set; }

        [Newtonsoft.Json.JsonProperty("DateRaised", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateRaised { get; set; }

        [Newtonsoft.Json.JsonProperty("DateReported", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateReported { get; set; }

        [Newtonsoft.Json.JsonProperty("Customer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Party Customer { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AppointmentPreference
    {
        [Newtonsoft.Json.JsonProperty("SpecificDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? SpecificDate { get; set; }

        [Newtonsoft.Json.JsonProperty("ExcludedPeriod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExcludedPeriod ExcludedPeriod { get; set; }

        [Newtonsoft.Json.JsonProperty("DaysOfWeek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<DaysOfWeekCodeC0> DaysOfWeek { get; set; }

        [Newtonsoft.Json.JsonProperty("DegreeOfPreference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DegreeOfPreference { get; set; }

        [Newtonsoft.Json.JsonProperty("TimeOfDay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TimeOfDay> TimeOfDay { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ExcludedPeriod
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("StartDateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? StartDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("EndDateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? EndDateTime { get; set; }


    }

}
